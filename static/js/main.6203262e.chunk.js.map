{"version":3,"sources":["APIKeys.js","actions/searchActions.js","actions/types.js","components/home/SearchForm.jsx","components/home/MovieCard.jsx","components/home/MoviesContainer.jsx","components/home/Landing.jsx","components/home/Movie.jsx","App.js","serviceWorker.js","reducers/searchReducer.js","reducers/index.js","store.js","index.js"],"names":["module","exports","APIKey","setLoading","type","SearchForm","props","onChange","e","searchMovie","target","value","onSubmit","preventDefault","fetchMovies","text","Jumbotron","Form","this","Group","controlId","Control","placeholder","Button","variant","Component","connect","state","movies","dispatch","payload","axios","get","then","response","data","MovieCard","movie","Card","Img","src","Poster","Body","Title","Year","Text","to","imdbID","MoviesContainer","console","log","content","Search","length","map","idx","key","Row","className","Landing","loading","Movie","fetchMovie","match","params","id","Spinner","animation","Plot","ListGroup","ListGroupItem","Rated","Released","Runtime","Genre","Director","Writer","Actors","Language","Country","Awards","imdbRating","imdbVotes","Type","Website","Production","BoxOffice","DVD","App","Container","exact","path","component","Boolean","window","location","hostname","initialState","searchReducer","action","combineReducers","middleware","thunk","logger","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6203262e.chunk.js","sourcesContent":["module.exports = {\n    APIKey: '80f60432'\n};","import {FETCH_MOVIE, FETCH_MOVIES, SEARCH_MOVIE, LOADING} from './types';\nimport axios from 'axios';\n\nimport {APIKey} from '../APIKeys';\nexport const searchMovie = text => dispatch => {\n    dispatch({\n        type: SEARCH_MOVIE,\n        payload: text\n    })\n};\n\nlet movies = [\n{Title: \"Fast & Furious 6\", Year: \"2013\", imdbID: \"tt1905041\", Type: \"movie\", Poster: \"https://m.media-amazon.com/images/M/MV5BMTM3NTg2NDQzOF5BMl5BanBnXkFtZTcwNjc2NzQzOQ@@._V1_SX300.jpg\"},\n{Title: \"Fast Five\", Year: \"2011\", imdbID: \"tt1596343\", Type: \"movie\", Poster: \"https://m.media-amazon.com/images/M/MV5BMTUxNTk5MTE0OF5BMl5BanBnXkFtZTcwMjA2NzY3NA@@._V1_SX300.jpg\"},\n{Title: \"The Fast and the Furious\", Year: \"2001\", imdbID: \"tt0232500\", Type: \"movie\", Poster: \"https://m.media-amazon.com/images/M/MV5BNzlkNzVjMD…mMxZjFhXkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SX300.jpg\"},\n{Title: \"Fast & Furious\", Year: \"2009\", imdbID: \"tt1013752\", Type: \"movie\", Poster: \"https://m.media-amazon.com/images/M/MV5BYjQ1ZTMxNz…DZlOWEzXkEyXkFqcGdeQXVyNzkwMjQ5NzM@._V1_SX300.jpg\"},\n {Title: \"2 Fast 2 Furious\", Year: \"2003\", imdbID: \"tt0322259\", Type: \"movie\", Poster: \"https://m.media-amazon.com/images/M/MV5BMzExYjcyYW…WQzMDE2XkEyXkFqcGdeQXVyMTQxNzMzNDI@._V1_SX300.jpg\"},\n{Title: \"The Fast and the Furious: Tokyo Drift\", Year: \"2006\", imdbID: \"tt0463985\", Type: \"movie\", Poster: \"https://m.media-amazon.com/images/M/MV5BMTQ2NTMxODEyNV5BMl5BanBnXkFtZTcwMDgxMjA0MQ@@._V1_SX300.jpg\"},\n{Title: \"Fast & Furious Presents: Hobbs & Shaw\", Year: \"2019\", imdbID: \"tt6806448\", Type: \"movie\", Poster: \"https://m.media-amazon.com/images/M/MV5BOTIzYmUyMm…mRiYzIwXkEyXkFqcGdeQXVyMDM2NDM2MQ@@._V1_SX300.jpg\"},\n{Title: \"Fast Times at Ridgemont High\", Year: \"1982\", imdbID: \"tt0083929\", Type: \"movie\", Poster: \"https://m.media-amazon.com/images/M/MV5BYzBlZjE1MD…DBkZmI2XkEyXkFqcGdeQXVyNjQ2MjQ5NzM@._V1_SX300.jpg\"},\n{Title: \"Fast Food Nation\", Year: \"2006\", imdbID: \"tt0460792\", Type: \"movie\", Poster: \"https://m.media-amazon.com/images/M/MV5BYzM0ODQ5OG…DI1YTAwXkEyXkFqcGdeQXVyMTQxNzMzNDI@._V1_SX300.jpg\"},\n{Title: \"How to Sell Drugs Online (Fast)\", Year: \"2019–\", imdbID: \"tt9184994\", Type: \"series\", Poster: \"https://m.media-amazon.com/images/M/MV5BMmFjYmFhMW…DhiNDAzXkEyXkFqcGdeQXVyNjkwMTY5OTk@._V1_SX300.jpg\"}\n];\nexport const fetchMovies = text => dispatch => {\n    axios.get(`https://www.omdbapi.com/?apikey=${APIKey}&s=${text}`)\n        .then(response => dispatch({\n            type: FETCH_MOVIES,\n            payload: response.data\n        }));\n};\n\nexport const fetchMovie = id => dispatch => {\n    axios.get(`https://www.omdbapi.com/?apikey=${APIKey}&i=${id}`)\n        .then(response => dispatch({\n            type: FETCH_MOVIE,\n            payload: response.data\n        }));\n};\n\nexport const setLoading = () => {\n    return {\n        type: LOADING\n\n    }\n}","export const SEARCH_MOVIE = 'SEARCH_MOVIE';\nexport const FETCH_MOVIES = 'FETCH_MOVIES';\nexport const FETCH_MOVIE = 'FETCH_MOVIE';\nexport const LOADING = 'LOADING';","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport {searchMovie, fetchMovies, setLoading} from '../../actions/searchActions';\nimport {connect} from 'react-redux';\n\nclass SearchForm extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    onChange = e =>{\n        this.props.searchMovie(e.target.value);\n    };\n\n    onSubmit = e => {\n        e.preventDefault();\n        this.props.setLoading();\n        this.props.fetchMovies(this.props.text);\n\n    };\n\n    render() {\n        return (\n\n            <Jumbotron>\n                <h1>Search Movies, TV series ...!</h1>\n                <Form onSubmit={this.onSubmit}>\n                    <Form.Group controlId=\"formGridAddress2\">\n                        <Form.Control placeholder=\"type movie name, tv show ...\"\n                            onChange={this.onChange}\n                        />\n                    </Form.Group>\n                    <Button variant=\"primary\" type=\"submit\">\n                        Search\n                    </Button>\n                </Form>\n            </Jumbotron>\n\n\n        );\n    }\n}\n\n// SearchForm.propTypes = {};\n\nconst mapStateToProps = state => ({\n    text: state.movies.text\n});\nexport default connect(mapStateToProps, {searchMovie, fetchMovies, setLoading})(SearchForm);","import React, {Component} from 'react';\nimport Card from \"react-bootstrap/Card\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport ListGroupItem from \"react-bootstrap/ListGroupItem\";\nimport {Link} from \"react-router-dom\";\n\nclass MovieCard extends Component {\n    render() {\n\n        let {movie} = this.props;\n        return (\n            <Card>\n                <Card.Img variant=\"top\" src={movie.Poster} />\n                <Card.Body>\n                    <Card.Title>{movie.Title}({movie.Year})</Card.Title>\n                    <Card.Text>\n                        Some quick example text to build on the card title and make up the bulk of\n                        the card's content.\n                    </Card.Text>\n                </Card.Body>\n                <Card.Body>\n                    <Link to={`/movie/${movie.imdbID}`}>see more</Link>\n                </Card.Body>\n            </Card>\n        );\n    }\n}\n\nexport default MovieCard;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport MovieCard from \"./MovieCard\";\nimport {CardGroup, Container} from \"react-bootstrap\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nclass MoviesContainer extends Component {\n    render() {\n        const {movies} = this.props;\n        console.log(this.props);\n        let content = '';\n        content = (movies.Search && movies.Search.length > 0) ?\n            movies.Search.map((movie, idx)=> {\n                return <MovieCard key={movie.imdbID} movie={movie}/>\n            }):null;\n        return (\n              <div>\n                  <Row className='movies-grid'>\n                          {content}\n                  </Row>\n              </div>\n        );\n    }\n}\n\nconst mapStateToProps = state =>({\n     movies: state.movies.movies\n});\nexport default  connect(mapStateToProps, {})(MoviesContainer);","import React, {Component} from 'react';\nimport SearchForm from './SearchForm';\nimport {connect} from 'react-redux';\nimport  MoviesContainer from './MoviesContainer';\n\nclass Landing extends Component {\n    render() {\n        const {loading} = this.props;\n        return (\n            <>\n            <SearchForm/>\n            {loading ? 'loading...' : <MoviesContainer/>}\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = state =>({\n    loading: state.movies.loading\n});\nexport default connect(mapStateToProps, {})(Landing);","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from \"react-redux\";\nimport {fetchMovie, setLoading} from \"../../actions/searchActions\";\nimport Card from \"react-bootstrap/Card\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport ListGroupItem from \"react-bootstrap/ListGroupItem\";\nimport {Spinner} from \"react-bootstrap\";\n\nclass Movie extends Component {\n\n    componentDidMount() {\n        this.props.setLoading();\n        this.props.fetchMovie(this.props.match.params.id);\n    }\n\n    render() {\n        const {movie, loading} = this.props;\n        let content = loading ?   <Spinner animation=\"border\" variant=\"info\" /> :\n            (\n                <Card>\n                    <Card.Img variant=\"top\" src={movie.Poster} />\n                    <Card.Body>\n                        <Card.Title>{movie.Title}</Card.Title>\n                        <Card.Text>\n                            {movie.Plot}\n                        </Card.Text>\n                    </Card.Body>\n                    <ListGroup className=\"list-group-flush\">\n                        <ListGroupItem>Rated: {movie.Rated}</ListGroupItem>\n                        <ListGroupItem>Released: {movie.Released}</ListGroupItem>\n                        <ListGroupItem>Runtime: {movie.Runtime}</ListGroupItem>\n                        <ListGroupItem>Genre: {movie.Genre}</ListGroupItem>\n                        <ListGroupItem>Director: {movie.Director}</ListGroupItem>\n                        <ListGroupItem>Writer: {movie.Writer}</ListGroupItem>\n                        <ListGroupItem>Actors: {movie.Actors}</ListGroupItem>\n                        <ListGroupItem>Language: {movie.Language}</ListGroupItem>\n                        <ListGroupItem>Country: {movie.Country}</ListGroupItem>\n                        <ListGroupItem>Awards: {movie.Awards}</ListGroupItem>\n                        <ListGroupItem>imdbRating: {movie.imdbRating}</ListGroupItem>\n                        <ListGroupItem>imdbVotes: {movie.imdbVotes}</ListGroupItem>\n                        <ListGroupItem>Type: {movie.Type}</ListGroupItem>\n                        <ListGroupItem>Website: {movie.Website}</ListGroupItem>\n                        <ListGroupItem>Production: {movie.Production}</ListGroupItem>\n                        <ListGroupItem>BoxOffice: {movie.BoxOffice}</ListGroupItem>\n                        <ListGroupItem>DVD: {movie.DVD}</ListGroupItem>\n                    </ListGroup>\n                </Card>\n            );\n        return (\n            <>\n            {content}\n            </>\n        );\n    }\n}\n\n// Movie.propTypes = {};\nconst mapStateToProps = state => ({\n    loading: state.movies.loading,\n    movie: state.movies.movie\n});\nexport default connect(mapStateToProps, {fetchMovie, setLoading})(Movie);","import React from 'react';\nimport './App.css';\nimport Landing from \"./components/home/Landing\";\nimport {Container} from \"react-bootstrap\";\nimport {Route} from \"react-router-dom\";\nimport Movie from \"./components/home/Movie\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Container>\n      <Route exact path=\"/\" component={Landing}/>\n      <Route path='/movie/:id' component={Movie}/>\n    </Container>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {SEARCH_MOVIE, FETCH_MOVIES, FETCH_MOVIE, LOADING} from '../actions/types';\n\nconst initialState = {\n    text: '',\n    movies: [],\n    loading: false,\n    movie:[]\n};\n\nfunction searchReducer(state = initialState, action){\n    switch (action.type) {\n        case SEARCH_MOVIE:\n            return {\n                ...state,\n                text: action.payload,\n                loading: false\n            };\n        case FETCH_MOVIES:\n            return {\n                ...state,\n                movies: action.payload,\n                loading: false\n            };\n        case FETCH_MOVIE:\n            return {\n                ...state,\n                movie: action.payload,\n                loading: false\n            };\n        case LOADING:\n            return {\n                ...state,\n                loading: true\n            };\n        default:\n            return state;\n    }\n}\n\nexport default searchReducer;","import {combineReducers} from 'redux';\n\nimport searchReducer from './searchReducer'\nexport default combineReducers({\n    movies: searchReducer\n});","import { createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport {composeWithDevTools} from 'redux-devtools-extension/developmentOnly';\nimport rootReducer from './reducers';\nconst middleware = [thunk, logger];\nconst initialState = {};\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(...middleware))\n);\n\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter, HashRouter} from 'react-router-dom';\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <React.StrictMode>\n                <App />\n            </React.StrictMode>\n        </HashRouter>\n    </Provider>\n , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}